generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Author {
  id          Int      @id @default(autoincrement())
  name        String
  birthDate   DateTime
  nationality String
  bio         String
  photoUrl    String
  titles      Title[]
}

model Title {
  id            Int      @id @default(autoincrement())
  title         String
  authorId      Int
  author        Author   @relation(fields: [authorId], references: [id])
  rating        Float
  inStock       Int
  description   String
  publishedAt   DateTime
  borrowed      Int
  freeToLoans   Int
  isbn          String
  numberOfPages Int
  coverUrl      String
  language      String
  genreId       Int
  genre         Genre    @relation(fields: [genreId], references: [id])

  books         Book[]
}

model Book {
  id            Int     @id @default(autoincrement())
  barcode       String  @unique
  titleId       Int
  title         Title   @relation(fields: [titleId], references: [id])
  loaned        Boolean @default(false)
  loans         Loan[]
  reservations  Reservation[]
}

model User {
  id            Int       @id @default(autoincrement())
  name          String
  email         String    @unique
  password      String
  role          String    @default("user")
  createdAt     DateTime  @default(now())
  loans         Loan[]
  active        Boolean   @default(true)
  trustworthy   Boolean   @default(false)
  reservations  Reservation[]
}

model Loan {
  id          Int       @id @default(autoincrement())
  bookId      Int
  userId      Int
  loanedAt    DateTime  @default(now())
  dueDate     DateTime
  returnedAt  DateTime?
  status      String    @default("Active")

  book        Book      @relation(fields: [bookId], references: [id])
  user        User      @relation(fields: [userId], references: [id])
  fine        Fine?
}

model Genre {
  id      Int     @id @default(autoincrement())
  name    String
  titles  Title[]
}

model Reservation {
  id          Int       @id @default(autoincrement())
  bookId      Int
  userId      Int
  reservedAt  DateTime  @default(now())
  fullfilled  Boolean   @default(false)

  user        User @relation(fields: [userId], references: [id])
  book        Book @relation(fields: [bookId], references: [id])
}

model Fine {
  id      Int     @id @default(autoincrement())
  loanId  Int     @unique
  amount  Float
  paid    Boolean @default(false)

  loan    Loan    @relation(fields: [loanId], references: [id])
}

model ActionLog {
  id        Int       @id @default(autoincrement())
  action    String  
  entity    String
  entityId  Int
  message   String?
  createdAt DateTime  @default(now())
}